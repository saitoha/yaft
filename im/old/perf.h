/* C code produced by gperf version 3.0.4 */
/* Command-line: gperf -N lookup -H hash  */
/* Computed positions: -k'1-3' */

#if !((' ' == 32) && ('!' == 33) && ('"' == 34) && ('#' == 35) \
      && ('%' == 37) && ('&' == 38) && ('\'' == 39) && ('(' == 40) \
      && (')' == 41) && ('*' == 42) && ('+' == 43) && (',' == 44) \
      && ('-' == 45) && ('.' == 46) && ('/' == 47) && ('0' == 48) \
      && ('1' == 49) && ('2' == 50) && ('3' == 51) && ('4' == 52) \
      && ('5' == 53) && ('6' == 54) && ('7' == 55) && ('8' == 56) \
      && ('9' == 57) && (':' == 58) && (';' == 59) && ('<' == 60) \
      && ('=' == 61) && ('>' == 62) && ('?' == 63) && ('A' == 65) \
      && ('B' == 66) && ('C' == 67) && ('D' == 68) && ('E' == 69) \
      && ('F' == 70) && ('G' == 71) && ('H' == 72) && ('I' == 73) \
      && ('J' == 74) && ('K' == 75) && ('L' == 76) && ('M' == 77) \
      && ('N' == 78) && ('O' == 79) && ('P' == 80) && ('Q' == 81) \
      && ('R' == 82) && ('S' == 83) && ('T' == 84) && ('U' == 85) \
      && ('V' == 86) && ('W' == 87) && ('X' == 88) && ('Y' == 89) \
      && ('Z' == 90) && ('[' == 91) && ('\\' == 92) && (']' == 93) \
      && ('^' == 94) && ('_' == 95) && ('a' == 97) && ('b' == 98) \
      && ('c' == 99) && ('d' == 100) && ('e' == 101) && ('f' == 102) \
      && ('g' == 103) && ('h' == 104) && ('i' == 105) && ('j' == 106) \
      && ('k' == 107) && ('l' == 108) && ('m' == 109) && ('n' == 110) \
      && ('o' == 111) && ('p' == 112) && ('q' == 113) && ('r' == 114) \
      && ('s' == 115) && ('t' == 116) && ('u' == 117) && ('v' == 118) \
      && ('w' == 119) && ('x' == 120) && ('y' == 121) && ('z' == 122) \
      && ('{' == 123) && ('|' == 124) && ('}' == 125) && ('~' == 126))
/* The character set is not based on ISO-646.  */
error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gnu-gperf@gnu.org>."
#endif


#define TOTAL_KEYWORDS 292
#define MIN_WORD_LENGTH 1
#define MAX_WORD_LENGTH 3
#define MIN_HASH_VALUE 1
#define MAX_HASH_VALUE 1012
/* maximum key range = 1012, duplicates = 0 */

#ifdef __GNUC__
__inline
#else
#ifdef __cplusplus
inline
#endif
#endif
static unsigned int
hash (str, len)
     register const char *str;
     register unsigned int len;
{
  static unsigned short asso_values[] =
    {
      1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
      1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
      1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
      1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
      1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
      1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
      1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
      1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
      1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
      1013, 1013, 1013, 1013, 1013, 1013, 1013,   15,   42,  505,
       250,   10,   12,  393,   40,  275,  218,  163,   35,  374,
        94,    5,  348,   30,  333,  135,   80,  115,  298,   20,
       468,    0,  470, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
      1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
      1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
      1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
      1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
      1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
      1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
      1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
      1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
      1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
      1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
      1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
      1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
      1013, 1013, 1013, 1013, 1013, 1013
    };
  register int hval = len;

  switch (hval)
    {
      default:
        hval += asso_values[(unsigned char)str[2]];
      /*FALLTHROUGH*/
      case 2:
        hval += asso_values[(unsigned char)str[1]];
      /*FALLTHROUGH*/
      case 1:
        hval += asso_values[(unsigned char)str[0]];
        break;
    }
  return hval;
}

#ifdef __GNUC__
__inline
#if defined __GNUC_STDC_INLINE__ || defined __GNUC_GNU_INLINE__
__attribute__ ((__gnu_inline__))
#endif
#endif
const char *
lookup (str, len)
     register const char *str;
     register unsigned int len;
{
  static const char * wordlist[] =
    {
      "",
      "y",
      "yy",
      "", "", "",
      "o",
      "yo",
      "", "", "",
      "e",
      "ye",
      "f",
      "", "",
      "a",
      "ya",
      "",
      "fo",
      "fyo",
      "w",
      "", "",
      "fe",
      "fye",
      "ff",
      "wo",
      "",
      "fa",
      "fya",
      "q",
      "we",
      "", "", "",
      "l",
      "wa",
      "", "", "",
      "h",
      "ww",
      "b",
      "", "", "",
      "ho",
      "hyo",
      "bo",
      "byo",
      "",
      "he",
      "hye",
      "be",
      "bye",
      "",
      "ha",
      "hya",
      "ba",
      "bya",
      "", "", "", "", "", "", "",
      "who",
      "", "", "", "",
      "whe",
      "", "", "", "",
      "wha",
      "", "",
      "t",
      "hh",
      "", "", "",
      "bb",
      "to",
      "tyo",
      "", "", "",
      "te",
      "tye",
      "",
      "n",
      "",
      "ta",
      "tya",
      "", "",
      "no",
      "nyo",
      "", "", "",
      "ne",
      "nye",
      "two",
      "", "",
      "na",
      "nya",
      "twe",
      "", "",
      "u",
      "yu",
      "twa",
      "", "", "", "", "", "", "", "", "",
      "tho",
      "fu",
      "fyu",
      "", "",
      "the",
      "", "",
      "s",
      "",
      "tha",
      "", "", "",
      "so",
      "syo",
      "", "", "",
      "se",
      "sye",
      "", "", "",
      "sa",
      "sya",
      "", "", "",
      "hu",
      "hyu",
      "bu",
      "byu",
      "",
      "tt",
      "swo",
      "k",
      "", "", "",
      "swe",
      "",
      "ko",
      "kyo",
      "",
      "swa",
      "",
      "ke",
      "kye",
      "",
      "whu",
      "",
      "ka",
      "kya",
      "",
      "sho",
      "", "", "", "",
      "she",
      "",
      "nn",
      "kwo",
      "",
      "sha",
      "", "",
      "kwe",
      "tu",
      "tyu",
      "", "",
      "kwa",
      "", "", "", "", "", "", "", "", "",
      "nu",
      "nyu",
      "", "", "", "", "",
      "twu",
      "j",
      "", "", "",
      "tso",
      "",
      "jo",
      "jyo",
      "",
      "tse",
      "",
      "je",
      "jye",
      "",
      "tsa",
      "",
      "ja",
      "jya",
      "",
      "thu",
      "", "", "", "", "", "", "", "", "",
      "", "", "",
      "d",
      "su",
      "syu",
      "", "", "",
      "do",
      "dyo",
      "", "", "",
      "de",
      "dye",
      "", "", "",
      "da",
      "dya",
      "", "", "",
      "ss",
      "swu",
      "", "",
      "i",
      "",
      "dwo",
      "",
      "ku",
      "kyu",
      "",
      "dwe",
      "", "", "", "",
      "dwa",
      "fi",
      "fyi",
      "", "",
      "shu",
      "", "", "",
      "wi",
      "dho",
      "v",
      "",
      "kwu",
      "",
      "dhe",
      "",
      "vo",
      "vyo",
      "",
      "dha",
      "",
      "ve",
      "vye",
      "", "", "",
      "va",
      "vya",
      "hi",
      "hyi",
      "bi",
      "byi",
      "", "", "", "", "", "", "",
      "kk",
      "", "", "", "",
      "tsu",
      "r",
      "ju",
      "jyu",
      "",
      "whi",
      "",
      "ro",
      "ryo",
      "", "", "",
      "re",
      "rye",
      "", "",
      "p",
      "ra",
      "rya",
      "", "", "",
      "po",
      "pyo",
      "ti",
      "tyi",
      "",
      "pe",
      "pye",
      "", "", "",
      "pa",
      "pya",
      "du",
      "dyu",
      "", "",
      "ni",
      "nyi",
      "", "",
      "m",
      "", "",
      "twi",
      "", "",
      "mo",
      "myo",
      "", "", "",
      "me",
      "mye",
      "dwu",
      "", "",
      "ma",
      "mya",
      "",
      "g",
      "", "", "",
      "thi",
      "",
      "go",
      "gyo",
      "", "", "",
      "ge",
      "gye",
      "",
      "dhu",
      "",
      "ga",
      "gya",
      "si",
      "syi",
      "",
      "vu",
      "vyu",
      "", "", "", "",
      "gwo",
      "", "", "", "",
      "gwe",
      "", "", "", "",
      "gwa",
      "",
      "swi",
      "", "", "", "",
      "jj",
      "",
      "ki",
      "kyi",
      "", "", "", "", "", "", "", "",
      "ru",
      "ryu",
      "",
      "shi",
      "", "", "", "", "", "", "",
      "kwi",
      "", "", "",
      "pu",
      "pyu",
      "", "",
      "x",
      "",
      "z",
      "", "", "", "",
      "djo",
      "zo",
      "zyo",
      "", "",
      "dje",
      "ze",
      "zye",
      "", "",
      "dja",
      "za",
      "zya",
      "", "",
      "mu",
      "myu",
      "tsi",
      "",
      "ji",
      "jyi",
      "",
      "zwo",
      "", "",
      "wxe",
      "dd",
      "zwe",
      "", "",
      "c",
      "",
      "zwa",
      "",
      "gu",
      "gyu",
      "co",
      "cyo",
      "", "", "",
      "ce",
      "cye",
      "", "", "",
      "ca",
      "cya",
      "", "", "",
      "di",
      "dyi",
      "", "",
      "gwu",
      "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "",
      "dwi",
      "", "", "", "",
      "cho",
      "", "", "", "",
      "che",
      "", "", "", "",
      "cha",
      "", "", "", "",
      "dhi",
      "", "", "", "", "", "",
      "vi",
      "vyi",
      "", "", "", "", "", "", "", "", "",
      "dju",
      "zu",
      "zyu",
      "", "", "", "", "", "", "", "", "",
      "vv",
      "", "", "", "", "", "", "", "", "",
      "zwu",
      "",
      "ri",
      "ryi",
      "", "", "", "", "", "", "", "", "",
      "",
      "cu",
      "cyu",
      "",
      "pi",
      "pyi",
      "",
      "tch",
      "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "",
      "", "", "", "",
      "mi",
      "myi",
      "", "", "", "", "", "", "", "", "",
      "",
      "chu",
      "", "",
      "xtu",
      "",
      "rr",
      "",
      "gi",
      "gyi",
      "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "",
      "",
      "gwi",
      "", "", "", "", "", "",
      "pp",
      "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "",
      "dxo",
      "",
      "dzo",
      "", "",
      "dxe",
      "",
      "dze",
      "", "",
      "dxa",
      "",
      "dza",
      "", "", "", "", "", "", "",
      "dji",
      "zi",
      "zyi",
      "",
      "mm",
      "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "",
      "wxi",
      "",
      "zwi",
      "", "", "", "", "", "", "", "", "",
      "", "", "", "",
      "ci",
      "cyi",
      "", "", "", "",
      "gg",
      "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "",
      "chi",
      "", "", "", "", "", "", "", "", "",
      "", "", "",
      "dxu",
      "",
      "dzu",
      "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "",
      "xx",
      "", "", "",
      "zz",
      "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "",
      "dxi",
      "",
      "dzi",
      "", "", "", "", "", "", "", "", "",
      "", "", "", "",
      "cc"
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      register int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= 0)
        {
          register const char *s = wordlist[key];

          if (*str == *s && !strcmp (str + 1, s + 1))
            return s;
        }
    }
  return 0;
}
